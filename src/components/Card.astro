---
import { ACTIONS } from '../types'

interface Props {
    title: string
    content: string | null
    id: string
    order: number
    columnId: string
    boardId: number
}

const { title, content, id, boardId } = Astro.props
---

<li
    id={`card-${id}`}
    x-data='{acceptDrop:"none"}'
    draggable='true'
    x-on:dragstart.self={`event.dataTransfer.effectAllowed = 'move';
    event.dataTransfer.setData('htmx/card',event.target.id)`}
    x-on:dragover.prevent={`
    if (event.dataTransfer.types.includes('htmx/card')) {
        let rect = event.currentTarget.getBoundingClientRect()
        let midpoint = (rect.top + rect.bottom) / 2
        acceptDrop = event.clientY <= midpoint ? 'top' : 'bottom'
    }
    `}
    x-on:dragleave='acceptDrop="none"'
    x-on:drop.prevent={`
        acceptDrop="none"
        let rect = event.currentTarget.getBoundingClientRect()
        let midpoint = (rect.top + rect.bottom) / 2
        let position = event.clientY <= midpoint ? 'top' : 'bottom'
        
        let child = document.getElementById(event.dataTransfer.getData('htmx/card'))
        console.log(event.currentTarget, position)
        if(position === 'top'){
            event.currentTarget.closest('ul').insertBefore(child,event.currentTarget)
        }
        if(position === 'bottom'){
            event.currentTarget.closest('ul').insertAfter(child,event.currentTarget)
        }
    `}
    class='item-card border-t-2 border-b-2 -mb-[2px] last:mb-0 cursor-grab active:cursor-grabbing px-2 py-1'
    :class={`{'border-t-brand-red border-b-transparent': acceptDrop === 'top','border-b-brand-red border-t-transparent':acceptDrop === 'bottom','border-t-transparent border-b-transparent':acceptDrop === 'none'}`}
>
    <div
        class='bg-white shadow shadow-slate-300 border-slate-300 text-sm rounded-lg w-full py-1 px-2 relative'
    >
        <h3>{title}</h3>
        <div class='mt-2'>{content || <>&nbsp;</>}</div>
        <form
            hx-post={`/board/${boardId}`}
            hx-target='closest .item-card'
            hx-indicator='closest .item-card'
            hx-swap='delete'
        >
            <input type='hidden' name='action' value={ACTIONS.deleteItem} />
            <input type='hidden' name='itemId' value={id} />
            <button
                aria-label='Delete card'
                class='absolute top-4 right-4 hover:text-brand-red'
                type='submit'
            >
                ‚ùå
            </button>
        </form>
    </div>
</li>

<script>
    //on dragover
    // (event) => {

    // }

    //on drop leave
    // () => {
    //     setAcceptDrop('none')
    // }

    //ondrop
    // (event) => {
    //     event.stopPropagation()

    //     let transfer = JSON.parse(
    //         event.dataTransfer.getData(CONTENT_TYPES.card)
    //     )
    //     invariant(transfer.id, 'missing cardId')
    //     invariant(transfer.title, 'missing title')

    //     let droppedOrder = acceptDrop === 'top' ? previousOrder : nextOrder
    //     let moveOrder = (droppedOrder + order) / 2

    //     let mutation: ItemMutation = {
    //         order: moveOrder,
    //         columnId: columnId,
    //         id: transfer.id,
    //         title: transfer.title,
    //     }

    //     submit(
    //         { ...mutation, intent: INTENTS.moveItem },
    //         {
    //             method: 'post',
    //             navigate: false,
    //             fetcherKey: `card:${transfer.id}`,
    //         }
    //     )

    //     setAcceptDrop('none')
    // }

    //ondragstart
    // (event) => {
    //         event.dataTransfer.effectAllowed = 'move'
    //         event.dataTransfer.setData(
    //             CONTENT_TYPES.card,
    //             JSON.stringify({ id, title })
    //         )
    //     }
</script>
<style>
    .item-card.htmx-request {
        display: none !important;
    }
</style>
