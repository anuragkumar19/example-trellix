---
import { z } from 'zod'
import EditableBoardTitle from '../../components/EditableBoardTitle.astro'
import TheBoard from '../../components/TheBoard.astro'
import BaseLayout from '../../layouts/BaseLayout.astro'
import {
    createItem,
    createColumn,
    getBoardData,
    updateBoardName,
    updateColumnName,
    deleteItem,
    reorder
} from '../../server/queries'
import { ACTIONS } from '../../types'
import Column from '../../components/Column.astro'
import EditableColumnTitle from '../../components/EditableColumnTitle.astro'
import Card from '../../components/Card.astro'

if (!Astro.locals.userId) {
    return Astro.redirect('/login')
}

if (!Astro.params.id) {
    return new Response('', { status: 404 })
}

const id = Number(Astro.params.id)

if (isNaN(id)) {
    return new Response('', { status: 404 })
}

let board = await getBoardData(id, Astro.locals.userId)

if (!board) {
    return new Response('', { status: 404 })
}

let action: (typeof ACTIONS)[keyof typeof ACTIONS] | undefined = undefined
let newCol: Awaited<ReturnType<typeof createColumn>> | undefined = undefined
let updatedColumn: { name: string; cloumnId: string } | undefined = undefined
let newItem: Awaited<ReturnType<typeof createItem>> | undefined = undefined

if (Astro.request.method === 'POST') {
    const data = await Astro.request.formData()
    const act = String(data.get('action'))

    switch (act) {
        case ACTIONS.updateBoardName: {
            action = act
            const result = z
                .string({
                    invalid_type_error: 'Invalid name',
                    required_error: 'Name is required',
                })
                .trim()
                .min(1, { message: 'Name is required' })
                .safeParse(data.get('name'))

            if (!result.success) {
                return new Response('', { status: 400 })
            }

            const b = await updateBoardName(board.id, result.data)
            board.name = b.name
            break
        }
        case ACTIONS.updateColumnName: {
            action = act
            const result = z
                .object({
                    name: z
                        .string({
                            invalid_type_error: 'Invalid name',
                            required_error: 'Name is required',
                        })
                        .trim()
                        .min(1, { message: 'Name is required' }),
                    columnId: z
                        .string({
                            invalid_type_error: 'Invalid columnId',
                            required_error: 'ColumnId is required',
                        })
                        .trim()
                        .min(1, { message: 'ColumnId is required' }),
                })
                .safeParse({
                    name: data.get('name'),
                    columnId: data.get('columnId'),
                })

            if (!result.success) {
                return new Response('', { status: 400 })
            }

            const c = await updateColumnName(
                result.data.columnId,
                result.data.name
            )
            updatedColumn = {
                name: c.name,
                cloumnId: c.id,
            }
            break
        }
        case ACTIONS.createColumn: {
            action = act
            const result = z
                .string({
                    invalid_type_error: 'Invalid name',
                    required_error: 'Name is required',
                })
                .trim()
                .min(1, { message: 'Name is required' })
                .safeParse(data.get('name'))

            if (!result.success) {
                return new Response('', { status: 400 })
            }

            newCol = await createColumn(board.id, result.data)
            break
        }
        case ACTIONS.createItem: {
            action = act
            const columnId = String(data.get('columnId'))

            const col = board.columns.findIndex((c) => c.id === columnId)

            if (col === -1) {
                return new Response('', { status: 400 })
            }

            const result = z
                .string({
                    invalid_type_error: 'Invalid title',
                    required_error: 'Title is required',
                })
                .trim()
                .min(1, { message: 'Title is required' })
                .safeParse(data.get('title'))

            if (!result.success) {
                return new Response('', { status: 400 })
            }

            newItem = await createItem(board.id, columnId, result.data)
            break
        }
        case ACTIONS.deleteItem: {
            const itemId = String(data.get('itemId'))

            const item = await deleteItem(itemId)
            console.log(itemId)

            if (!item) {
                return new Response('', { status: 400 })
            }
            return new Response('', { status: 200 })
        }
        case ACTIONS.moveItem: {
            const newColumnId = String(data.get('newColumnId'))
            const oldColumnId = String(data.get('oldColumnId'))
            const itemId = String(data.get('itemId'))
            const prevItemId = String(data.get('prevItemId'))
            const nextItemId = String(data.get('nextItemId'))

            const item = board.items.findIndex(item => item.id === itemId && item.columnId === oldColumnId)

            if(item === -1){
                return new Response('', {status:400})
            }

            const oldCol = board.columns.find(c => c.id === oldColumnId)
            const newCol = board.columns.find(c => c.id === newColumnId)

            if(!oldCol || !newCol){
                return new Response('', {status:400})
            }

            //const oldColItems = board.items.filter((item) => item.columnId === oldCol.id)
            const newColItems = board.items.filter((item) => item.columnId === newCol.id).sort((a, b) => a.order - b.order)

            if(prevItemId === 'undefined' && nextItemId === 'undefined'){
                if(newColItems.length !== 0){
                    return new Response('', {status:400})
                }

                await reorder(itemId, newColumnId, 1)
               return new Response('', {status:200})
            }

            if(prevItemId === 'undefined'){
                if(newColItems[0]?.id !== nextItemId){
                    return new Response('', {status:400})
                }

                await reorder(itemId, newColumnId, newColItems[0].order/2)
                return new Response('', {status:200})
            }

            if(nextItemId === 'undefined'){
                if(newColItems[newColItems.length-1]?.id !== prevItemId){
                    return new Response('', {status:400})
                }

                await reorder(itemId, newColumnId, newColItems[newColItems.length-1]!.order+1)
                return new Response('', {status:200})
            }

            const prevItemIndex = newColItems.findIndex(item => item.id === prevItemId)

            if(prevItemIndex === -1){
                return new Response('', {status:400})
            }

            if(newColItems[prevItemIndex+1]?.id !== nextItemId){
                return new Response('', {status:400})
            }

            await reorder(itemId, newColumnId, (newColItems[prevItemIndex]!.order+newColItems[prevItemIndex+1]!.order)/2)
            return new Response('', {status:200})
        }
        default: {
            return new Response('', { status: 400 })
        }
    }
}
---

{
    action === undefined && (
        <BaseLayout title={`${board.name} Board`}>
            <TheBoard {board} />
            <template>
                <Column
                    items={[]}
                    boardId={board.id}
                    column={{ id: '', name: '' }}
                />
            </template>
            <script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.2/Sortable.min.js" integrity="sha512-TelkP3PCMJv+viMWynjKcvLsQzx6dJHvIGhfqzFtZKgAjKM1YPqcwzzDEoTc/BHjf43PcPzTQOjuTr4YdE8lNQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
            <script is:inline>
                
                const addTask = (() => {
                    let pending = Promise.resolve();
                    
                    const run = async (url, options) => {
                        try {
                        await pending;
                        } catch(err){
                            alert('Something went wrong while syncing. Triggering full page reload')
                            window.location.reload()
                        } finally {
                        return fetch(url, options);
                        }
                    }

                    // update pending promise so that next task could await for it
                    return (url, options) => (pending = run(url, options))
                })();

                htmx.onLoad(function(content) {
                    var sortables = content.querySelectorAll(".sortable");
                    for (var i = 0; i < sortables.length; i++) {
                        var sortable = sortables[i];
                        new Sortable(sortable, {
                            animation: 150,
                            group: 'shared',
                            onEnd: (e) => {
                                const oldColumnId = e.from.getAttribute('data-column-id')
                                const newColumnId = e.to.getAttribute('data-column-id')

                                const prevItemId = e.to.children[e.newIndex-1]?.getAttribute('data-item-id')
                                const nextItemId = e.to.children[e.newIndex+1]?.getAttribute('data-item-id')
                                const itemId = e.to.children[e.newIndex]?.getAttribute('data-item-id')
                                const body = new FormData()

                                body.append("oldColumnId", oldColumnId)
                                body.append("newColumnId", newColumnId)
                                body.append("prevItemId", prevItemId)
                                body.append("nextItemId", nextItemId)
                                body.append("itemId", itemId)
                                body.append("action", "moveItem")

                                if(!(oldColumnId === newColumnId && e.oldIndex === e.newIndex)){
                                    addTask("", {
                                    method:"POST",
                                    body
                                    })
                                }
                            }
                        });
                    }
                })
            </script>
        </BaseLayout>
    )
}

{
    action && action === ACTIONS.updateBoardName && (
        <>
            <EditableBoardTitle id={board.id} name={board.name} />
            <title>{board.name} - Trellix</title>
        </>
    )
}

{
    action && action === ACTIONS.updateColumnName && updatedColumn && (
        <EditableColumnTitle
            boardId={board.id}
            columnId={updatedColumn.cloumnId}
            name={updatedColumn.name}
        />
    )
}

{
    action && action === ACTIONS.createColumn && newCol && (
        <Column
            boardId={board.id}
            items={[]}
            column={{ id: newCol.id, name: newCol.name }}
        />
    )
}

{
    action && action === ACTIONS.createItem && newItem && (
        <Card
            boardId={board.id}
            columnId={newItem.columnId}
            id={newItem.id}
            content={newItem.content}
            title={newItem.title}
            order={newItem.order}
        />
    )
}
